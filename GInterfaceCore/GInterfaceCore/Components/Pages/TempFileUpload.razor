

<h3>Cargar Archivo temp CSV</h3>

<InputFile OnChange="HandleFileSelected" accept=".csv, .xlsx, .xls" />
<br />
@if (!string.IsNullOrEmpty(UploadedContent))
{
    <h4>Tamaño del archivo: @FileSizeInKB KB</h4>
    <RadzenButton Click=@(args => OnClick("Primary button")) Text="Ok" ButtonStyle="ButtonStyle.Primary" />
    //Tengo que hacer que el boton on con la funcion Onclick cierre el boton y
    //ejecute la carga de datos en la base
}


@code {
    private string UploadedContent { get; set; } = string.Empty;
    private long FileSizeInBytes { get; set; }
    private double FileSizeInKB => FileSizeInBytes / 1024.0;
    private Core.AppCore _appCore = Core.AppCore.Instance;
    private Core.Utils.ExcelParse _excel = new Core.Utils.ExcelParse();
    // private Core.Utils.ExcelParse _excel= Core.Utils.ExcelParse.;
    string[] csvFile;
    string[] headers;

    private void OnClick(string text)
    {
        _appCore.InsertBaseFileCsv(_appCore.CFileName, _appCore.fileStatus, _appCore.head,_appCore.documentType, _appCore.ObjJason, _appCore.inbound);
        DialogService.Close();
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Button Clicked", Detail = text });
    }


    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var saveFolder = Path.Combine("C:\\Temp\\Files");
        var filePath = Path.Combine(saveFolder, e.File.Name);
        Directory.CreateDirectory(saveFolder);

        await using FileStream fs = new(filePath, FileMode.Create);
        await e.File.OpenReadStream().CopyToAsync(fs);
    }

    private async Task<bool> HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var fileName = file.Name;

        if (file != null)
        {
            FileSizeInBytes = file.Size;

            try
            {
                // Abre el stream del archivo (límite de 100 MB)
                using (var stream = file.OpenReadStream(104857600))
                {
                    // Verifica si es un archivo de Excel
                    if (fileName.Contains(".xls", StringComparison.OrdinalIgnoreCase) ||
                    fileName.Contains(".xlsx", StringComparison.OrdinalIgnoreCase))
                    {
                        var parameters = new Dictionary<string, object>() { { "FileName", fileName } };

                        // Mostrar modal para pedir el tamaño del header
                        var result = await DialogService.OpenComponentExtension<HeaderSizeDialog>("Título del Diálogo", parameters, null);

                        if (result != null)
                        {
                            int headerSize;
                            if (int.TryParse(result.HeaderSize.ToString(), out headerSize))
                            {
                                List<string> requireFields = result.AdditionalFieldText != null
                                ? new List<string>(result.AdditionalFieldText.Split(','))
                                : new List<string> { "No_contiene_encabezado" };

                                // Simulate background task
                                List<List<string>> informationExcel = await _excel.SimulateFileUpload(stream, fileName, headerSize, result.StartRow, result.EndRow, requireFields);
                                var info = result.StartRow + "," + result.EndRow;
                                _appCore.sortDataExcel(informationExcel, fileName, requireFields, info);
                                _appCore.inbound = result.SelectedOptionInOut;
                                headers = _appCore.headers;
                                UploadedContent = "a";
                                _appCore.documentType = result.SelectedOption;

                                // Retornar true si se procesa correctamente
                                return true;
                            }
                            else
                            {
                                NotificationService.Notify(new NotificationMessage
                                        {
                                            Severity = NotificationSeverity.Error,
                                            Summary = "Error en el Tamaño del Encabezado",
                                            Detail = "El tamaño del encabezado ingresado no es válido. Por favor, ingrese un número entero."
                                        });
                                // Retornar false si hay error con el encabezado
                                return false;
                            }
                        }
                        else
                        {
                            // Si el resultado es null, el usuario canceló
                            return false;
                        }
                    }
                    else
                    {
                        // Solo leer el archivo si no es Excel
                        using (var reader = new StreamReader(stream))
                        {
                            UploadedContent = await reader.ReadToEndAsync();

                            // Procesar el archivo CSV
                            csvFile = UploadedContent.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                            _appCore.sortData(csvFile, fileName);
                            headers = csvFile[0].Split(',');
                        }
                    }
                }

                if (headers != null)
                {
                    await ShowFieldInfoDialog(headers.Length, headers);
                }

                NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = $"{file.Name}",
                            Detail = $"{FileSizeInKB} KB",
                            Duration = 4000,
                        });

                // Retornar true si se procesa correctamente el archivo no Excel
                return true;
            }
            catch (Exception ex)
            {
                UploadedContent = $"Error al leer el archivo: {ex.Message}";
                NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error al leer el archivo",
                            Detail = ex.Message
                        });

                // Retornar false si ocurre una excepción
                return false;
            }
        }
        else
        {
            UploadedContent = "No se seleccionó ningún archivo.";
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error en seleccion",
                        Detail = UploadedContent
                    });

            // Retornar false si no se seleccionó archivo
            return false;
        }
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" class="rz-p-12">
        <RadzenImage Path="images/loading.gif" Style="width: 200px;" AlternateText="community" />
        <RadzenText TextStyle="TextStyle.H6">Cargando meta informacion...</RadzenText>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    private async Task ShowFieldInfoDialog(int fieldCount, string[] fields)
    {
        var message = $"El archivo CSV contiene {fieldCount} campos.\n\nCampos:\n{string.Join("\n", fields)}";
    }


}
