<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

<PageTitle>GInterface - Manejo de Interfaces</PageTitle>

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Style="height: 100%; width: 100%;">
            <RadzenLabel Text="HEADER" Style="margin-left: 20px;" />
            <RadzenButton Click=@(args => OnClick(EnumTypes.TransactionTask.GET_LOGOUT)) Text="Log Out" Icon="refresh" ButtonStyle="ButtonStyle.Base" Visible=@_appCore.IsOnline Style="margin-right: 20px;" />
        </RadzenStack>
    </RadzenHeader>


    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            @if (_appCore.IsOnline)
            {
                <RadzenPanelMenuItem Text="Home" Icon="home"
                                     Click=@(args => OnClick(EnumTypes.TransactionTask.GET_HOME)) />
            }
          
            @if (_appCore.IsAdmin)
            {
                <RadzenPanelMenuItem Text="Config" Icon="assessment"
                                     Click=@(args => OnClick(EnumTypes.TransactionTask.GET_CONFIG)) />
            }            
        </RadzenPanelMenu>
        <div class="rz-p-4">
            Sidebar
        </div>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        Footer
    </RadzenFooter>
</RadzenLayout>

@code {
    //Get Global Core Settings
    private Core.AppCore _appCore = Core.AppCore.Instance;

    bool sidebar1Expanded = true;

    protected override void OnInitialized()
    {
        _appCore.MainLayoutCore = this;
    }

    #region MainMenu

    public async Task OnClick(EnumTypes.TransactionTask transactionItem)
    {
        _appCore.LastTransactionTask = transactionItem;
        switch (transactionItem)
        {
            case EnumTypes.TransactionTask.GET_HOME:
                //TODO: We need implement a CURRENT_HOME because if you are in other Page, this approach don't work it
                //sidebar1Expanded = !sidebar1Expanded;
                if (_appCore.IsLoginUser)
                {
                    GoToUri("/");
                }
                else
                {
                    UriHelper.NavigateTo("/login");
                }
                break;
            case EnumTypes.TransactionTask.GET_CONFIG:
                //sidebar1Expanded = !sidebar1Expanded;
                UriHelper.NavigateTo("/config");
                break;
            case EnumTypes.TransactionTask.GET_LOGIN:
                UriHelper.NavigateTo("/login");
                break;
            case EnumTypes.TransactionTask.GET_MAIN_MENU:
                UriHelper.NavigateTo("/");
                break;
            case EnumTypes.TransactionTask.GET_LOGOUT:
                _appCore.LogOut();
                UriHelper.NavigateTo("/login");
                await InvokeAsync(StateHasChanged);
                break;
        }
    }

    public void GoToUri(string _uri = "/")
    {
        UriHelper.NavigateTo(_uri);
    }
    #endregion MainMenu
}
