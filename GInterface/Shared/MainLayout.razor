<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

<PageTitle>GInterface - Manejo de Interfaces</PageTitle>

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <RadzenLabel Text="Header" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home"
                                 Click=@(args => OnClick(EnumTypes.TransactionTask.GET_HOME)) />
            <RadzenPanelMenuItem Text="Config" Icon="assessment"
                                 Click=@(args => OnClick(EnumTypes.TransactionTask.GET_CONFIG)) />
        </RadzenPanelMenu>
        <div class="rz-p-4">
            Sidebar
        </div>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        Footer
    </RadzenFooter>
</RadzenLayout>

@code {
    //Get Global Core Settings
    private Core.AppCore _appCore = Core.AppCore.Instance;

    bool sidebar1Expanded = true;

    #region MainMenu
    public async Task OnClick(EnumTypes.TransactionTask transactionItem)
    {
        _appCore.LastTransactionTask = transactionItem;
        switch (transactionItem)
        {
            case EnumTypes.TransactionTask.GET_HOME:
                //TODO: We need implement a CURRENT_HOME because if you are in other Page, this approach don't work it
                sidebar1Expanded = !sidebar1Expanded;
                if (_appCore.IsLoginUser)
                {
                    UriHelper.NavigateTo("/");
                }
                else
                {
                    UriHelper.NavigateTo("/login");
                }
                break;
            case EnumTypes.TransactionTask.GET_CONFIG:
                sidebar1Expanded = !sidebar1Expanded;
                UriHelper.NavigateTo("/config");
                break;
            case EnumTypes.TransactionTask.GET_LOGIN:
                UriHelper.NavigateTo("/login");
                break;
            case EnumTypes.TransactionTask.GET_MAIN_MENU:
                UriHelper.NavigateTo("/");
                break;
        }
    }
    #endregion MainMenu
}
