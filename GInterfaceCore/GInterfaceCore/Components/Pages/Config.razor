@page "/config"
@rendermode InteractiveServer

<PageTitle>Configuración de Tipos de Documentos</PageTitle>

<table style="width:80%">
    <tr>
        <td hidden="@hideMenu1">
            <!-- Botón con imagen de fondo -->
            <button @onclick="() => OnClick(GInterfaceCore.Models.EnumTypes.MenuItems.Picklist)"
                    class="btn"
                    style="background-image: url('/images/integra.png'); width: 100px; height: 100px; background-size: cover; border: none;">
            </button>
            <!-- Texto debajo del botón -->
            <p class="size_12 text_center">@GInterfaceCore.Models.EnumTypes.MenuItems.Picklist.GetDisplayDescription()</p>
        </td>
    </tr>
</table>

@code {
    //Get Global Core Settings
    private Core.AppCore _appCore = Core.AppCore.Instance;
    //By Menu Btns
    bool hideMenu1 = false;

    protected override void OnInitialized()
    {

    }

    // Mostrar Panel de Configuracion del Documento
    private async Task OnClick(GInterfaceCore.Models.EnumTypes.MenuItems globalMenuItems)
    {

        switch (globalMenuItems)
        {
            case GInterfaceCore.Models.EnumTypes.MenuItems.Picklist:
                //Call Picklist Process
                var parameters = "globalMenuItems";

                // Mostrar modal para pedir el tamaño del header
                //var result = await DialogService.OpenAsync<HeaderSizeDialog>("Tamaño del Encabezado",
                //new Dictionary<string, object>() { { "FileName", fileName } },
                //new DialogOptions() { Width = "500px", Height = "300px" });
                
                var result = await DialogService.OpenComponentExtension<FileUpLoad>("Espera");

                if (result != null)
                {
                    int headerSize;
                    if (int.TryParse(result.HeaderSize.ToString(), out headerSize))
                    {
                        // Ejecutar una tarea en segundo plano
                        await Task.Run(async () =>
                    {
                        try
                        {
                            // Simular una tarea en segundo plano
                            await InvokeAsync(async () =>
                            {
                                NotificationService.Notify(new NotificationMessage
                                        {
                                            Severity = NotificationSeverity.Info,
                                            Summary = "Button Clicked",
                                            Detail = globalMenuItems.GetDisplayDescription()
                                        });

                                // Lógica adicional que deseas ejecutar
                                DialogService.Close();
                            });

                            await BusyDialog();
                        }
                        catch (Exception ex)
                        {
                            // Manejo de excepciones
                            NotificationService.Notify(new NotificationMessage
                                    {
                                        Severity = NotificationSeverity.Error,
                                        Summary = "Error",
                                        Detail = $"Ocurrió un error: {ex.Message}"
                                    });
                        }
                    });
                    }
                    else
                    {
                        NotificationService.Notify(new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Error,
                                    Summary = "Error en el Tamaño del Encabezado",
                                    Detail = "El tamaño del encabezado ingresado no es válido. Por favor, ingrese un número entero."
                                });
                        return;
                    }
                }

                break;
            default:
                break;
        }
    }

    public async Task OpenUpLoadFile()
    {
        await DialogService.OpenAsync<FileUpLoad>("Subir Archivo",
               new Dictionary<string, object>() { },
               new DialogOptions()
                   {
                       Resizable = true,
                       Draggable = true
                   });
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" class="rz-p-12">
                <RadzenImage Path="images/loading.gif" Style="width: 200px;" AlternateText="community" />
                <RadzenText TextStyle="TextStyle.H6">Cargando meta informacion...</RadzenText>
            </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
}
