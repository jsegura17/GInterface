@page "/workspace"
@rendermode InteractiveServer

<div style="text-align: center; margin-top: 20px;">
    <h2 style="background-color: royalblue; border-radius: 15px; padding: 20px;">Bases Disponibles</h2>
    <div style="margin-bottom: 20px;">
        <label for="UserType">Selección del tipo de Documento:</label>
        <RadzenDropDown id="UserType" @bind-Value="SelectedOption" Data="@transaction" TextProperty="Name" ValueProperty="Value" Placeholder="Seleccione una opción" Style="width:100%;" Change="OnSelectedOptionChanged" />
        @if (!string.IsNullOrEmpty(SelectedOptionError))
        {
            <div style="color:red;">@SelectedOptionError</div>
        }
    </div>
</div>

<div style="display: flex; justify-content: center; margin-top: 30px;">
    <table style="width:80%; background-color: white;">
        @if (FilteredTemplateFiles != null && FilteredTemplateFiles.Any())
        {
            <tr>
                @foreach (var file in FilteredTemplateFiles)
                {
                    <td>
                        <div style="display: flex; flex-direction: column; align-items: center;">
                            <button @onclick="() => ChargeDocument(file)" class="btn"
                                    style="background-image: url('/images/integra.png'); width: 100px; height: 100px; background-size: cover; border: none;">
                            </button>
                            <p class="size_12 text_center">@file.FileNames</p>
                        </div>
                    </td>
                }
            </tr>
        }
        else
        {
            <tr>
                <td colspan="2" class="text_center">No hay archivos disponibles.</td>
            </tr>
        }
    </table>
</div>

<div style="text-align: center; margin-top: 20px;">
    <h2 style="background-color: royalblue; border-radius: 15px; padding: 20px;">Archivos Pendientes</h2>
</div>
<div style="display: flex; justify-content: center; margin-top: 30px;">
    <table style="width:80%">
        @if (FilteredPendingFiles != null && FilteredPendingFiles.Any())
        {
            <tr>
                @foreach (var file in FilteredPendingFiles)
                {
                    <td>
                        <div style="display: flex; flex-direction: column; align-items: center; margin: 10px;">
                            <button @onclick="() => ChargeDocument(file)" class="btn"
                                    style="background-image: url('/images/camiones.jpg'); width: 100px; height: 100px; background-size: cover; border: none;">
                            </button>
                            <p class="size_12 text_center">@file.FileNames</p>
                        </div>
                    </td>
                }
            </tr>
        }
        else
        {
            <tr>
                <td colspan="2" class="text_center">No hay archivos disponibles.</td>
            </tr>
        }
    </table>
</div>

@code {
    private List<FileCSV> templateFiles = null;
    private List<FileCSV> PendingFiles = null;
    private List<FileCSV> FilteredTemplateFiles = null;
    private List<FileCSV> FilteredPendingFiles = null;
    private Core.AppCore _appCore = Core.AppCore.Instance;
    public string SelectedOption { get; set; }
    public string SelectedOptionError { get; set; }

    protected override async void OnInitialized()
    {
        templateFiles = _appCore.GetTemplateFiles();
        PendingFiles = _appCore.GetPendingFiles();
        FilterFiles(); // Filtrar los archivos desde el inicio
    }

    private void FilterFiles()
    {
        // Filtrar archivos basados en la opción seleccionada
        if (!string.IsNullOrEmpty(SelectedOption))
        {
            FilteredTemplateFiles = templateFiles.Where(file => file.InboundOutbound == SelectedOption).ToList();
            FilteredPendingFiles = PendingFiles.Where(file => file.InboundOutbound == SelectedOption).ToList();
        }
    }

    private void OnSelectedOptionChanged(object value)
    {
        SelectedOption = value.ToString();
        FilterFiles();
    }

    public List<EnumValue> transaction => new List<EnumValue>
    {
        new EnumValue { Name = "Ingreso", Value = "Ingreso" },
        new EnumValue { Name = "Egreso", Value = "Egreso" }
    };

    public class EnumValue
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public async void ChargeDocument(FileCSV file)
    {
        var parameters = new Dictionary<string, object>
        {
            { "SomeParameter", file }
        };

        var result = await DialogService.OpenComponentExtension<FileUpLoad>("Espera", parameters);
        if (result != null)
        {
            // Lógica para procesar el archivo
        }
    }
}
