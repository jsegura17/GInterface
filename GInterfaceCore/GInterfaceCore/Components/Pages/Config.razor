@page "/config"
@page "/config/{IsAdmin:bool}"
@rendermode InteractiveServer

<PageTitle>Configuración de Tipos de Documentos</PageTitle>

<table style="width:80%">
    @if (templateFiles != null && templateFiles.Any())
    {
        foreach (var file in templateFiles)
        {
            <tr>
                <td>
                    <button @onclick="() => OnClick(file)" class="btn"
                            style="background-image: url('/images/integra.png'); width: 100px; height: 100px; background-size: cover; border: none;">
                    </button>
                    <p class="size_12 text_center">@file.FileType</p>
                </td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="2" class="text_center">No hay archivos disponibles.</td>
        </tr>
    }
</table>
@if (_appCore.IsAdmin)
{
    <div class="text_center">
        <RadzenButton Shade="Shade.Light" Click=@(args =>OpenTempFileUpload()) Text="Agregar Más" ButtonStyle="ButtonStyle.Success" />
    </div>
}

@code {
    // Get Global Core Settings
    private Core.AppCore _appCore = Core.AppCore.Instance;
    private List<FileCSV> templateFiles = null;

    [Parameter]
    public bool IsAdmin { get; set; }

    protected override void OnParametersSet()
    {
        if (IsAdmin)
        {
            _appCore.IsAdmin = IsAdmin;
        }
        else
        {
            _appCore.IsAdmin = false;
        }
    }

    protected override void OnInitialized()
    {
        templateFiles = _appCore.GetTemplateFiles();
    }



    private async Task OpenTempFileUpload()
    {
        FileCSV file = null;
        var result = await DialogService.OpenComponentExtension<TempFileUpload>("Espera");

        if (result != null)
        {
            int headerSize;
            if (int.TryParse(result.HeaderSize.ToString(), out headerSize))
            {
                // Ejecutar una tarea en segundo plano
                await Task.Run(async () =>
        {
            try
            {
                await InvokeAsync(async () =>
                {
                    NotificationService.Notify(new NotificationMessage
                            {
                                Severity = NotificationSeverity.Info,
                                Summary = "Button Clicked",
                                Detail = file.FileType.GetDisplayDescription()
                            });

                    DialogService.Close();
                });

                await BusyDialog();
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"Ocurrió un error: {ex.Message}"
                        });
            }
        });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error en el Tamaño del Encabezado",
                            Detail = "El tamaño del encabezado ingresado no es válido. Por favor, ingrese un número entero."
                        });
                return;
            }
        }
    }
   
  
    
    
  

    private async Task OnClick(FileCSV file)
    {
        switch (file.FileType)
        {
            case GInterfaceCore.Models.EnumTypes.DocumentType.Picklist:
                var parameters = new Dictionary<string, object>
                {
                { "SomeParameter", file }, // O cualquier propiedad que necesites pasar
                };

                var result = await DialogService.OpenComponentExtension<FileUpLoad>("Espera", parameters);

                if (result != null)
                {
                    int headerSize;
                    if (int.TryParse(result.HeaderSize.ToString(), out headerSize))
                    {
                        // Ejecutar una tarea en segundo plano
                        await Task.Run(async () =>
                    {
                        try
                        {
                            await InvokeAsync(async () =>
                            {
                                NotificationService.Notify(new NotificationMessage
                                        {
                                            Severity = NotificationSeverity.Info,
                                            Summary = "Button Clicked",
                                            Detail = file.FileType.GetDisplayDescription()
                                        });

                                DialogService.Close();
                            });

                            await BusyDialog();
                        }
                        catch (Exception ex)
                        {
                            NotificationService.Notify(new NotificationMessage
                                    {
                                        Severity = NotificationSeverity.Error,
                                        Summary = "Error",
                                        Detail = $"Ocurrió un error: {ex.Message}"
                                    });
                        }
                    });
                    }
                    else
                    {
                        NotificationService.Notify(new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Error,
                                    Summary = "Error en el Tamaño del Encabezado",
                                    Detail = "El tamaño del encabezado ingresado no es válido. Por favor, ingrese un número entero."
                                });
                        return;
                    }
                }

                break;

            default:
                break;
        }
    }


    public async Task OpenUpLoadFile()
    {
        await DialogService.OpenAsync<FileUpLoad>("Subir Archivo",
           new Dictionary<string, object>() { },
           new DialogOptions()
                   {
                       Resizable = true,
                       Draggable = true
                   });
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" class="rz-p-12">
        <RadzenImage Path="images/loading.gif" Style="width: 200px;" AlternateText="community" />
        <RadzenText TextStyle="TextStyle.H6">Cargando meta información...</RadzenText>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
}
